import binascii
import codecs
from matplotlib.pyplot import flag
import ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator
from Crypto.Util.number import long_to_bytes

e= 32084419284007369078607467113498929257267998025411088511996109547731942626627448080372754423806762302326371416519643023509801592177624702837498433029272478360968594201300811337084083116452565909099359360600087789257254840604075253051494670775094599348801845186486705915417021552370435714731558398198814144913
n= 78651498783703508780572901637303724940700940417635996200779710757030066823183414013669844587081468850634124494200476085239871936816161967415426648206173623225766328063874982693940556801187300853009134575484128459675246720769422855786060983102666887714295706583486942018002099046275697815760395226840665054123
c= 66989112677384661379991133310632293713201600494289919342186872905076563016440783935146449190879977279486793312539782790819699312421501319117890975280406848920515206872757517860277789976056474965324958408444623728880728999508504549878686195248937919085668057777392154478527490518275225986491201045537638436260


def hack_RSA(e,n):
    '''
    Finds d knowing (e,n)
    applying the Wiener continued fraction attack
    '''
    frac = ContinuedFractions.rational_to_contfrac(e, n)
    convergents = ContinuedFractions.convergents_from_contfrac(frac)
    
    for (k,d) in convergents:
        
        #check if d is actually the key
        if k!=0 and (e*d-1)%k == 0:
            phi = (e*d-1)//k
            s = n - phi + 1
            # check if the equation x^2 - s*x + n = 0
            # has integer roots
            discr = s*s - 4*n
            if(discr>=0):
                t = Arithmetic.is_perfect_square(discr)
                if t!=-1 and (s+t)%2==0:
                    print("Hacked!")
                    return d

# TEST functions

def test_hack_RSA():
    print("Testing Wiener Attack")
    times = 5
    
    while(times>0):
        e,n,d = RSAvulnerableKeyGenerator.generateKeys(1024)
        print("(e,n) is (", e, ", ", n, ")")
        print("d = ", d)
    
        hacked_d = hack_RSA(e, n)
    
        if d == hacked_d:
            print("Hack WORKED!")
        else:
            print("Hack FAILED")
        
        print("d = ", d, ", hacked_d = ", hacked_d)
        print("-------------------------")
        times -= 1

d = hack_RSA(e,n)

#d = 7268149982847508719202959093120582119259608447004218564858482228055621305303

h = pow(c,d,n)
#f = long_to_bytes(941933892304675161847270966567339952457392820388980203540018105706600842035482107745420371175759061830129151082438241208027570883920840933575065999067215571422673671944589245280504348788618865240307081319751777253463277756907020688486166320544466596179220461246716269786154875898584466729465152100022323300)

f = "{:x}".format(h)
print(f)
print(binascii.unhexlify(f))
